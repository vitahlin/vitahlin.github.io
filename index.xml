<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vitah Lin</title><link>https://vitahlin.github.io/</link><description>Recent content on Vitah Lin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 17 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://vitahlin.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>macOS采用CMake编译redis30源代码</title><link>https://vitahlin.github.io/posts/use-cmake-build-redis3.0/</link><pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/posts/use-cmake-build-redis3.0/</guid><description>版本说明 macOS：11.2.3 CMake：3.19.6 Clion：2020.3.2 克隆redis3.0源代码 去Github上面下载3.0版本的代码：https://codeload.github.com/redis/redis/zip/3.0 解压后将目录redis-3.0重新命名为redis 。
创建对应的CMakeLists.txt 使用cmake 编译redis 源码的话需要创建对应的CMakeLists.txt 文件，创建完成后，直接在redis 目录执行命令cmake . 即可。
redis/deps/hiredis/CMakeLists.txt add_library(hiredis STATIC hiredis.c net.c dict.c net.c sds.c async.c ) redis/deps/linenoise/CMakeLists.txt add_library(linenoise linenoise.c) redis/deps/lua/CMakeLists.txt set(LUA_SRC src/lapi.c src/lcode.c src/ldebug.c src/ldo.c src/ldump.c src/lfunc.c src/lgc.c src/llex.c src/lmem.c src/lobject.c src/lopcodes.c src/lparser.c src/lstate.c src/lstring.c src/ltable.c src/ltm.c src/lundump.c src/lvm.c src/lzio.c src/strbuf.</description></item><item><title>Shell expect的介绍</title><link>https://vitahlin.github.io/posts/shell-expect-command/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/posts/shell-expect-command/</guid><description>&lt;p>我们通过Shell可以实现简单的控制流功能，如：循环、判断等。但是对于需要交互的场合则必须通过人工来干预，有时候我们可能会需要实现和交互程序如&lt;code>telnet&lt;/code>服务器等进行交互的功能。而&lt;code>expect&lt;/code>就使用来实现这种功能的工具。&lt;code>expect&lt;/code>是一个免费的编程工具语言，用来实现自动和交互式任务进行通信，而无需人工干预。&lt;/p></description></item><item><title>Shell参数介绍</title><link>https://vitahlin.github.io/posts/shell-param/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/posts/shell-param/</guid><description>如下一个命令：
./test.sh -f config.conf -v --prefix=/home 我们称-f为选项，它需要一个参数，即config.conf，-v 也是一个选项，但它不需要参数。--prefix 我们称之为一个长选项，即选项本身多于一个字符，它也需要一个参数，用等号连接，当然等号不是必须的，/home可以直接写在--prefix后面，即--prefix/home。
以上述的命令为例：
$0 : ./test.sh，即命令本身，相当于C/C++中的 argv[0] $1 : -f，第一个参数 $2 : config.conf，第二个参数 $3, $4 &amp;hellip; ：类推 $# : 参数的个数，不包括命令本身，上例中 $#为 4 $@ : 参数本身的列表，也不包括命令本身，如上例为 -f、config.conf、-v、--prefix=/home $* : 和 $@ 相同，但 $* 和 $@ (加引号)并不同， $* 将所有的参数解释成一个字符串，而 $@ 是一个参数数组。 参考链接
http://blog.csdn.net/qzwujiaying/article/details/6371246</description></item><item><title>Ubuntu18.04安装时花屏问题</title><link>https://vitahlin.github.io/posts/install-ubuntu-18.04/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/posts/install-ubuntu-18.04/</guid><description>选择Install Ubuntu后屏幕花屏 制作U盘安装器后，选择正常的安装方式，即 Intsall Ubuntu 直接安装后后屏幕会花屏。
此时，应该选中Install Ubuntu不直接回车进入安装，而是按e键进入编辑界面，在linux选项下把后边的---去掉，并加上nomodeset参数，然后按Ctrl+X保存并退出，进入安装程序，就可以正常安装了。
首次启动后输入正确密码一直循环进不去或者花屏 Nvidia显卡问题，启动Ubuntu时按e键盘进入编辑模式，将 quiet splash 改为 quiet splash nomodeset ，保存后启动即可。
启动后进入终端，开始安装对应的显卡驱动，输入 ubuntu-drivers devices 查找合适的驱动：
$ ubuntu-drivers devices == /sys/devices/pci0000:00/0000:00:01.0/0000:01:00.0 == modalias : pci:v000010DEd00002182sv00001B4Csd000012E1bc03sc00i00 vendor : NVIDIA Corporation driver : nvidia-driver-450 - distro non-free driver : nvidia-driver-455 - distro non-free recommended driver : nvidia-driver-450-server - distro non-free driver : nvidia-driver-440-server - distro non-free driver : nvidia-driver-418-server - distro non-free driver : xserver-xorg-video-nouveau - distro free builtin 可以看到推荐的驱动为 nvidia-driver-455 ，输入 sudo apt-get install nvidia-driver-455 ，安装完成后重启即可。</description></item><item><title>About</title><link>https://vitahlin.github.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/about/</guid><description>版权说明 署名-非商业性使用-禁止演绎 4.0 国际 (CC BY-NC-ND 4.0)
联系方式 Github：vitahlin Mail：linw1225@gmail.com Thanks for reading.</description></item><item><title>Contact</title><link>https://vitahlin.github.io/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/contact/</guid><description>Follow me, @johndoe.</description></item><item><title>Contato</title><link>https://vitahlin.github.io/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/contact/</guid><description>Me siga em @joaoninguem.</description></item><item><title>First snippet</title><link>https://vitahlin.github.io/snippets/first/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/snippets/first/</guid><description>This content is in snippets/first/index.md
pwd</description></item><item><title>Projects</title><link>https://vitahlin.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/projects/</guid><description>Nothing to see here&amp;hellip; Move along!</description></item><item><title>Projetos</title><link>https://vitahlin.github.io/projects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/projects/</guid><description>Em construção&amp;hellip; Aguarde!</description></item><item><title>Second snippet</title><link>https://vitahlin.github.io/snippets/second/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vitahlin.github.io/snippets/second/</guid><description>This content is in snippets/second/index.md
ls -la</description></item></channel></rss>