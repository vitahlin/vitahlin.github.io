<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on VitahLin</title><link>https://www.vitahlin.com/tags/spring/</link><description>Recent content in Spring on VitahLin</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 06 Mar 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://www.vitahlin.com/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring源码6-Bean实例化之createBean</title><link>https://www.vitahlin.com/2023/03/01gtv8vyzhp32ymc891e9mjwtd/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2023/03/01gtv8vyzhp32ymc891e9mjwtd/</guid><description>前言 前文已经介绍了 Spring 中 Bean 的实例化其实执行的是一个 lambda 表达式，即通过执行 createBean 方法创建 Bean 对象，接下来就来分析 createBean 方法的源码。 createBean方法 直</description></item><item><title>Spring源码6-Bean实例化之getBean</title><link>https://www.vitahlin.com/2023/03/01gtv8wqyvkndnnyz4t0jdszqz/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2023/03/01gtv8wqyvkndnnyz4t0jdszqz/</guid><description>前言 前文中我们已经大致说明了 Bean 的实例化流程，但是具体如何实例化还并未介绍，本文就详细介绍 Spring 的 getBean 方法，通过分析 getBean 方法的源码来了解 Bean 实例化的详细</description></item><item><title>Spring源码6-Bean实例化</title><link>https://www.vitahlin.com/2023/03/01gtv8xa5nda8r6xqdt0xfsqyt/</link><pubDate>Sat, 04 Mar 2023 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2023/03/01gtv8xa5nda8r6xqdt0xfsqyt/</guid><description>前言 先回顾下Bean实例化的真正入口，跟进源码 DefaultListableBeanFactory#preInstantiateSingletons 来看实例化的流程： image.png 这里主要有3部分逻辑： BeanDefnition 的合并-getMergedLocalBeanDe</description></item><item><title>Spring源码5-BeanDefinition生成</title><link>https://www.vitahlin.com/2023/01/01gtjv0gwkn3x4s9k6f3ssw93t/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2023/01/01gtjv0gwkn3x4s9k6f3ssw93t/</guid><description>前言 Spring 最重要的功能就是帮助程序员创建对象（也就是IOC），而启动 Spring 就是为创建 Bean 对象做准备，所以我们先明白 Spring 到底是怎么去创建 Bean 的，也就是先弄明</description></item><item><title>Spring源码6-BeanDefinition合并</title><link>https://www.vitahlin.com/2023/01/01gtk062gaeyc6f3awdfpg923f/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2023/01/01gtk062gaeyc6f3awdfpg923f/</guid><description>前言 前文分析了 Spring 的 Bean 扫描流程的源码，扫描完成后已经得到了一个 BeanDefinition 集合，接下来就是遍历 BeanDefinition 列表，进行 Bean 的实例化。 Spring上下文初始化 首先，来看</description></item><item><title>Spring源码4-核心概念介绍</title><link>https://www.vitahlin.com/2023/01/01gtjv0gwktg7e98gnv5y2yxfr/</link><pubDate>Fri, 06 Jan 2023 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2023/01/01gtjv0gwktg7e98gnv5y2yxfr/</guid><description>前言 在深入分析 Spring 源码前，需要先了解 Spring 框架中的一些核心概念，防止后续看源码的过程中，遇到不会的概念得单独跳出来学习。 主要介绍以下内容： 什么是B</description></item><item><title>Spring源码3-底层核心原理简单介绍</title><link>https://www.vitahlin.com/2023/01/01gtjtzggtwxpg83p6ejxemgm5/</link><pubDate>Thu, 05 Jan 2023 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2023/01/01gtjtzggtwxpg83p6ejxemgm5/</guid><description>Spring中的HelloWorld 任何代码的入门都是 Hello World ，同样我们来看下使用 Spring 的入门代码： 1 2 3 4 5 6 7 8 9 package org.springframework.vitahlin.hello; import org.springframework.context.annotation.ComponentScan; import org.springframework.context.annotation.Configuration; @Configuration @ComponentScan(basePackages = &amp;#34;org.springframework.vitahlin.hello&amp;#34;) public class HelloWorldScanConfig { }</description></item><item><title>Spring源码2-各模块介绍</title><link>https://www.vitahlin.com/2022/07/01gtjtxn1p6dqgb5abpxmcgpp3/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2022/07/01gtjtxn1p6dqgb5abpxmcgpp3/</guid><description>Spring中的模块划分如下图所示，除了图中的spring-vitahlin外，还有24个模块： spring模块 1. framework-bom 通过该模块，可以解决Sp</description></item><item><title>Spring源码1-编译5.3.10源码</title><link>https://www.vitahlin.com/2022/07/01gtjtqvdcp4vtg0stc124sdr9/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0800</pubDate><guid>https://www.vitahlin.com/2022/07/01gtjtqvdcp4vtg0stc124sdr9/</guid><description>源码下载 Github源码地址：https://github.com/spring-projects/spring-framework/tre</description></item></channel></rss>